#!/bin/zsh

# Module showing CPU load as a changing bars.
# Just like in polybar.
# Each bar represents amount of load on one core since
# last run.

# Cache in tmpfs to improve speed and reduce SSD load
cache=/tmp/cpubarscache

case $BLOCK_BUTTON in
	2) setsid -f "$TERMINAL" -e htop ;;
	3) notify-send "ü™® CPU load module" "Each bar represents
one CPU core";;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# id total idle
stats=$(awk '/cpu[0-9]+/ {printf "%d %d %d\n", substr($1,4), ($2 + $3 + $4 + $5), $5 }' /proc/stat)

[ ! -f $cache ] && echo "$stats" > "$cache"
lastvalues=$(cat "$cache")
echo "$stats" > "$cache"

printf "üñ•Ô∏è"
echo "$stats" | while read -r row; do
	id=${row%% *}
	rest=${row#* }
	total=${rest%% *}
	idle=${rest##* }

	# load="$(printf "%d\n" $(( (100 - $idle * 100 / $total) / 12.5)))"
	load="$(echo $lastvalues | awk '{if ($1 == id)
		printf "%d\n", (100 - (100 * (idle - $3)) / (total - $2)) / 12.5}' \
		id="$id" total="$total" idle="$idle")"
	# printf "$total $idle\n"
	case $load in
		"0") printf "‚ñÅ";;
		"1") printf "‚ñÇ";;
		"2") printf "‚ñÉ";;
		"3") printf "‚ñÑ";;
		"4") printf "‚ñÖ";;
		"5") printf "‚ñÜ";;
		"6") printf "‚ñá";;
		"7") printf "‚ñà";;
		"8") printf "‚ñà";;
	esac
done;

printf "\\n"
